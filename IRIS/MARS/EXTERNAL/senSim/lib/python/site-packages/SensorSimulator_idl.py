# Python stubs generated by omniidl from ../idl/SensorSimulator.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "corbaidl.idl"
import corbaidl_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")
# #include "boxes.idl"
import boxes_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")
# #include "CosProperty.idl"
import CosProperty_idl
_0_CosPropertyService = omniORB.openModule("CosPropertyService")
_0_CosPropertyService__POA = omniORB.openModule("CosPropertyService__POA")
# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
# #include "acscommon.idl"
import acscommon_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
_0_log_audience = omniORB.openModule("log_audience")
_0_log_audience__POA = omniORB.openModule("log_audience__POA")
_0_acscommon = omniORB.openModule("acscommon")
_0_acscommon__POA = omniORB.openModule("acscommon__POA")
# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
# #include "baci.idl"
import baci_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

#
# Start of module "SS"
#
__name__ = "SS"
_0_SS = omniORB.openModule("SS", r"../idl/SensorSimulator.idl")
_0_SS__POA = omniORB.openModule("SS__POA", r"../idl/SensorSimulator.idl")


# interface SensorSimulator
_0_SS._d_SensorSimulator = (omniORB.tcInternal.tv_objref, "IDL:alma/SS/SensorSimulator:1.0", "SensorSimulator")
omniORB.typeMapping["IDL:alma/SS/SensorSimulator:1.0"] = _0_SS._d_SensorSimulator
_0_SS.SensorSimulator = omniORB.newEmptyClass()
class SensorSimulator (_0_ACS.CharacteristicComponent):
    _NP_RepositoryId = _0_SS._d_SensorSimulator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_SS.SensorSimulator = SensorSimulator
_0_SS._tc_SensorSimulator = omniORB.tcInternal.createTypeCode(_0_SS._d_SensorSimulator)
omniORB.registerType(SensorSimulator._NP_RepositoryId, _0_SS._d_SensorSimulator, _0_SS._tc_SensorSimulator)

# SensorSimulator operations and attributes
SensorSimulator._d_on = ((omniORB.tcInternal.tv_long, ), (), None)
SensorSimulator._d_off = ((omniORB.tcInternal.tv_long, ), (), None)
SensorSimulator._d_resetAll = ((), (), None)
SensorSimulator._d_getStatus = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_long, ), None)

# SensorSimulator object reference
class _objref_SensorSimulator (_0_ACS._objref_CharacteristicComponent):
    _NP_RepositoryId = SensorSimulator._NP_RepositoryId

    def __init__(self):
        _0_ACS._objref_CharacteristicComponent.__init__(self)

    def on(self, *args):
        return _omnipy.invoke(self, "on", _0_SS.SensorSimulator._d_on, args)

    def off(self, *args):
        return _omnipy.invoke(self, "off", _0_SS.SensorSimulator._d_off, args)

    def resetAll(self, *args):
        return _omnipy.invoke(self, "resetAll", _0_SS.SensorSimulator._d_resetAll, args)

    def getStatus(self, *args):
        return _omnipy.invoke(self, "getStatus", _0_SS.SensorSimulator._d_getStatus, args)

    __methods__ = ["on", "off", "resetAll", "getStatus"] + _0_ACS._objref_CharacteristicComponent.__methods__

omniORB.registerObjref(SensorSimulator._NP_RepositoryId, _objref_SensorSimulator)
_0_SS._objref_SensorSimulator = _objref_SensorSimulator
del SensorSimulator, _objref_SensorSimulator

# SensorSimulator skeleton
__name__ = "SS__POA"
class SensorSimulator (_0_ACS__POA.CharacteristicComponent):
    _NP_RepositoryId = _0_SS.SensorSimulator._NP_RepositoryId


    _omni_op_d = {"on": _0_SS.SensorSimulator._d_on, "off": _0_SS.SensorSimulator._d_off, "resetAll": _0_SS.SensorSimulator._d_resetAll, "getStatus": _0_SS.SensorSimulator._d_getStatus}
    _omni_op_d.update(_0_ACS__POA.CharacteristicComponent._omni_op_d)

SensorSimulator._omni_skeleton = SensorSimulator
_0_SS__POA.SensorSimulator = SensorSimulator
omniORB.registerSkeleton(SensorSimulator._NP_RepositoryId, SensorSimulator)
del SensorSimulator
__name__ = "SS"

#
# End of module "SS"
#
__name__ = "SensorSimulator_idl"

_exported_modules = ( "SS", )

# The end.
