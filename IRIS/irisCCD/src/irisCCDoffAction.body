/*
 *
 * "@(#) $Id: irisCCDoffAction.body,v 1.13 2005/03/09 16:05:07 tjuerges Exp $"
 *
 * $Log: irisCCDoffAction.body,v $
 * Revision 1.13  2005/03/09 16:05:07  tjuerges
 * - Modified cleanUp code to prevent from Sigseg.
 *
 * Revision 1.12  2005/03/09 15:14:04  tjuerges
 * - Added some security to prevent objects from being deleted twice.
 *
 * Revision 1.11  2005/03/09 14:46:30  tjuerges
 * - Changed to be conform with the body architecture.
 *
 * Revision 1.10  2005/01/31 10:35:16  tjuerges
 * - Fixed memory leaks.
 *
 * Revision 1.9  2004/12/28 12:43:04  tjuerges
 * - ACE::sleep cannot handle ms waits. Only 1/100s are supported.
 *
 * Revision 1.8  2004/09/22 14:16:35  tjuerges
 * - F�r Simulation backgroundNoise und readoutNoise hinzugef�gt, rmsNoise entfernt.
 * - GUI speichert FITS auf Verlangen.
 * - GUI startet externes DS9 und beendet es.
 *
 *
 */

/*
 * Put in completion.[type|code] the completion error code.
 * By default it is set to Ok.
 *
 * Set old_component_status to any irisStatus.
 * The component will reflect this after exiting
 * this method.
 *
 * Already defined are int acs_error and ACS::Time time_stamp for DevIO calls.
 */

if(camera)
{
  if(camera->get_exposure_running())
  {
    // Stop running exposure:
    stop_exposure=true;

    // Wait for clean up:
    timespec wait_for_exposure_end_time=
    { static_cast<time_t>(0),ACE_ONE_SECOND_IN_NSECS/100L};
    do
    {
      ACE_OS::nanosleep(&wait_for_exposure_end_time);
    }
    while(camera->get_exposure_running());
  }
  std::cout<<"Camera="<<camera<<std::endl;
  //Suspend temperature thread.
  getComponent()->getThreadManager()->suspend("getTemperatureThread");
  ACS_SHORT_LOG((LM_INFO,"irisCCD::offAction: getTemperatureThread suspended."));

  if(camera->close_camera()!=(irisCamera::OK|irisCamera::CAMERA_OFF))
  {
    ACS_SHORT_LOG((LM_ERROR,"irisCCD::offAction: Cannot close camera. Check hardware or camera."));
    set_to_error(irisCamera::HARDWARE_ERROR);
  }

  if(camera)
  {
    delete camera;
    camera=0;
  }

  if(timeservice)
  {
    delete timeservice;
    timeservice=0;
  }

  tempImage->resize(0);

  ACS_SHORT_LOG((LM_INFO,"irisCCD::offAction: OK."));
  set_to_error(irisCamera::CAMERA_OFF);
  old_component_status=irisStatus::OFF;
  component_running=false;
}
else
{
  ACS_SHORT_LOG((LM_INFO,"irisCCD::offAction: No camera is active, nothing will be done!"));
}
