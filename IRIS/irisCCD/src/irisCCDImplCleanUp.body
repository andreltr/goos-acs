/*
 *
 * "@(#) $Id: irisCCDImplCleanUp.body,v 1.6 2005/03/09 16:05:07 tjuerges Exp $"
 *
 * $Log: irisCCDImplCleanUp.body,v $
 * Revision 1.6  2005/03/09 16:05:07  tjuerges
 * - Modified cleanUp code to prevent from Sigseg.
 *
 * Revision 1.5  2005/03/09 15:14:04  tjuerges
 * - Added some security to prevent objects from being deleted twice.
 *
 * Revision 1.4  2005/01/31 10:35:16  tjuerges
 * - Fixed memory leaks.
 *
 * Revision 1.3  2004/12/09 16:11:44  tjuerges
 * - Added call of offAction in Cleanup method.
 *
 * Revision 1.2  2004/09/22 14:16:35  tjuerges
 * - F�r Simulation backgroundNoise und readoutNoise hinzugef�gt, rmsNoise entfernt.
 * - GUI speichert FITS auf Verlangen.
 * - GUI startet externes DS9 und beendet es.
 *
 *
 */

/*
 * Safety code to ensure that nothing is runnning at all.
 */
while(component_running)
{
  ACE_OS::sleep(1);
};

if(camera)
{
  if(camera->get_exposure_running())
  {
    // Stop running exposure:
    stop_exposure=true;

    // Wait for clean up:
    timespec wait_for_exposure_end_time=
    { static_cast<time_t>(0),ACE_ONE_SECOND_IN_NSECS/100L};
    do
    {
      ACE_OS::nanosleep(&wait_for_exposure_end_time);
    }
    while(camera->get_exposure_running());
  }

  if(camera->close_camera()!=(irisCamera::OK|irisCamera::CAMERA_OFF))
  {
    ACS_SHORT_LOG((LM_ERROR,"irisCCD::CleanUp: Cannot close camera. Check hardware or camera."));
    set_to_error(irisCamera::HARDWARE_ERROR);
  }

  std::cout<<"CleanUp Camera="<<camera<<std::endl;
  delete camera;
  camera=0;
}

if(tempImage)
{
  delete tempImage;
  tempImage=0;
}

if(timeservice)
{
  delete timeservice;
  timeservice=0;
}
