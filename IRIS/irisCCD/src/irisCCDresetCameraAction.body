/*
 * "@(#) $Id: irisCCDresetCameraAction.body,v 1.7 2005/03/09 14:46:30 tjuerges Exp $"
 *
 * $Log: irisCCDresetCameraAction.body,v $
 * Revision 1.7  2005/03/09 14:46:30  tjuerges
 * - Changed to be conform with the body architecture.
 *
 * Revision 1.6  2004/09/22 14:16:35  tjuerges
 * - F�r Simulation backgroundNoise und readoutNoise hinzugef�gt, rmsNoise entfernt.
 * - GUI speichert FITS auf Verlangen.
 * - GUI startet externes DS9 und beendet es.
 *
 *
 */

/*
 * Put in completion.[type|code] the completion error code.
 * By default it is set to Ok.
 *
 * Set old_component_status to any irisStatus.
 * The component will reflect this after exiting
 * this method.
 *
 * Already defined are int acs_error and ACS::Time time_stamp for DevIO calls.
 */

if((camera!=0)&&(camera->get_camera_running()))
{
  // Suspend temperature thread.
  getComponent()->getThreadManager()->suspend("getTemperatureThread");
  ACS_SHORT_LOG((LM_INFO,"irisCCD::onAction: getTemperatureThread suspended."));
  stop_exposure=true;
  if(camera->reset_camera()!=irisCamera::OK)
  {
    ACS_SHORT_LOG((LM_ERROR,"irisCCD::resetCameraAction: Resetting the camera failed. Check the hardware!"));
  }
  else
  {
    // Resume temperature thread.
    getComponent()->getThreadManager()->resume("getTemperatureThread");
    ACS_SHORT_LOG((LM_INFO,"irisCCD::resetCameraAction: Resetting OK."));
  }
}
else
{
  ACS_SHORT_LOG((LM_ERROR,"irisCCD::resetCameraAction: Cannot reset camera. Camera is not active."));
}
