# Python stubs generated by omniidl from ../idl/bulkDataSender.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "corbaidl.idl"
import corbaidl_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")
# #include "boxes.idl"
import boxes_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")
# #include "CosProperty.idl"
import CosProperty_idl
_0_CosPropertyService = omniORB.openModule("CosPropertyService")
_0_CosPropertyService__POA = omniORB.openModule("CosPropertyService__POA")
# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
# #include "acscommon.idl"
import acscommon_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
_0_log_audience = omniORB.openModule("log_audience")
_0_log_audience__POA = omniORB.openModule("log_audience__POA")
_0_acscommon = omniORB.openModule("acscommon")
_0_acscommon__POA = omniORB.openModule("acscommon__POA")
# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
# #include "baci.idl"
import baci_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
# #include "ACSBulkDataError.idl"
import ACSBulkDataError_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_ACSBulkDataError = omniORB.openModule("ACSBulkDataError")
_0_ACSBulkDataError__POA = omniORB.openModule("ACSBulkDataError__POA")
# #include "AVStreams.idl"
import AVStreams_idl
_0_AVStreams = omniORB.openModule("AVStreams")
_0_AVStreams__POA = omniORB.openModule("AVStreams__POA")
# #include "bulkData.idl"
import bulkData_idl
_0_bulkdata = omniORB.openModule("bulkdata")
_0_bulkdata__POA = omniORB.openModule("bulkdata__POA")
# #include "ACSBulkDataStatus.idl"
import ACSBulkDataStatus_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_ACSBulkDataStatus = omniORB.openModule("ACSBulkDataStatus")
_0_ACSBulkDataStatus__POA = omniORB.openModule("ACSBulkDataStatus__POA")
# #include "bulkDataReceiver.idl"
import bulkDataReceiver_idl
_0_bulkdata = omniORB.openModule("bulkdata")
_0_bulkdata__POA = omniORB.openModule("bulkdata__POA")

#
# Start of module "bulkdata"
#
__name__ = "bulkdata"
_0_bulkdata = omniORB.openModule("bulkdata", r"../idl/bulkDataSender.idl")
_0_bulkdata__POA = omniORB.openModule("bulkdata__POA", r"../idl/bulkDataSender.idl")


# interface BulkDataSender
_0_bulkdata._d_BulkDataSender = (omniORB.tcInternal.tv_objref, "IDL:alma/bulkdata/BulkDataSender:1.0", "BulkDataSender")
omniORB.typeMapping["IDL:alma/bulkdata/BulkDataSender:1.0"] = _0_bulkdata._d_BulkDataSender
_0_bulkdata.BulkDataSender = omniORB.newEmptyClass()
class BulkDataSender (_0_ACS.CharacteristicComponent):
    _NP_RepositoryId = _0_bulkdata._d_BulkDataSender[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_bulkdata.BulkDataSender = BulkDataSender
_0_bulkdata._tc_BulkDataSender = omniORB.tcInternal.createTypeCode(_0_bulkdata._d_BulkDataSender)
omniORB.registerType(BulkDataSender._NP_RepositoryId, _0_bulkdata._d_BulkDataSender, _0_bulkdata._tc_BulkDataSender)

# BulkDataSender operations and attributes
BulkDataSender._d_connect = ((omniORB.typeMapping["IDL:alma/bulkdata/BulkDataReceiver:1.0"], ), (), {_0_ACSBulkDataError.AVConnectErrorEx._NP_RepositoryId: _0_ACSBulkDataError._d_AVConnectErrorEx})
BulkDataSender._d_disconnect = ((), (), {_0_ACSBulkDataError.AVDisconnectErrorEx._NP_RepositoryId: _0_ACSBulkDataError._d_AVDisconnectErrorEx})
BulkDataSender._d_startSend = (((omniORB.tcInternal.tv_string,0), ), (), {_0_ACSBulkDataError.AVStartSendErrorEx._NP_RepositoryId: _0_ACSBulkDataError._d_AVStartSendErrorEx})
BulkDataSender._d_paceData = ((), (), {_0_ACSBulkDataError.AVPaceDataErrorEx._NP_RepositoryId: _0_ACSBulkDataError._d_AVPaceDataErrorEx})
BulkDataSender._d_stopSend = ((), (), {_0_ACSBulkDataError.AVStopSendErrorEx._NP_RepositoryId: _0_ACSBulkDataError._d_AVStopSendErrorEx})

# BulkDataSender object reference
class _objref_BulkDataSender (_0_ACS._objref_CharacteristicComponent):
    _NP_RepositoryId = BulkDataSender._NP_RepositoryId

    def __init__(self):
        _0_ACS._objref_CharacteristicComponent.__init__(self)

    def connect(self, *args):
        return _omnipy.invoke(self, "connect", _0_bulkdata.BulkDataSender._d_connect, args)

    def disconnect(self, *args):
        return _omnipy.invoke(self, "disconnect", _0_bulkdata.BulkDataSender._d_disconnect, args)

    def startSend(self, *args):
        return _omnipy.invoke(self, "startSend", _0_bulkdata.BulkDataSender._d_startSend, args)

    def paceData(self, *args):
        return _omnipy.invoke(self, "paceData", _0_bulkdata.BulkDataSender._d_paceData, args)

    def stopSend(self, *args):
        return _omnipy.invoke(self, "stopSend", _0_bulkdata.BulkDataSender._d_stopSend, args)

    __methods__ = ["connect", "disconnect", "startSend", "paceData", "stopSend"] + _0_ACS._objref_CharacteristicComponent.__methods__

omniORB.registerObjref(BulkDataSender._NP_RepositoryId, _objref_BulkDataSender)
_0_bulkdata._objref_BulkDataSender = _objref_BulkDataSender
del BulkDataSender, _objref_BulkDataSender

# BulkDataSender skeleton
__name__ = "bulkdata__POA"
class BulkDataSender (_0_ACS__POA.CharacteristicComponent):
    _NP_RepositoryId = _0_bulkdata.BulkDataSender._NP_RepositoryId


    _omni_op_d = {"connect": _0_bulkdata.BulkDataSender._d_connect, "disconnect": _0_bulkdata.BulkDataSender._d_disconnect, "startSend": _0_bulkdata.BulkDataSender._d_startSend, "paceData": _0_bulkdata.BulkDataSender._d_paceData, "stopSend": _0_bulkdata.BulkDataSender._d_stopSend}
    _omni_op_d.update(_0_ACS__POA.CharacteristicComponent._omni_op_d)

BulkDataSender._omni_skeleton = BulkDataSender
_0_bulkdata__POA.BulkDataSender = BulkDataSender
omniORB.registerSkeleton(BulkDataSender._NP_RepositoryId, BulkDataSender)
del BulkDataSender
__name__ = "bulkdata"

#
# End of module "bulkdata"
#
__name__ = "bulkDataSender_idl"

_exported_modules = ( "bulkdata", )

# The end.
