# Python stubs generated by omniidl from ../idl/acstelescopeServer.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
# #include "ACSErrTypeCommon.idl"
import ACSErrTypeCommon_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_ACSErrTypeCommon = omniORB.openModule("ACSErrTypeCommon")
_0_ACSErrTypeCommon__POA = omniORB.openModule("ACSErrTypeCommon__POA")
# #include "corbaidl.idl"
import corbaidl_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")
# #include "boxes.idl"
import boxes_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")
# #include "CosProperty.idl"
import CosProperty_idl
_0_CosPropertyService = omniORB.openModule("CosPropertyService")
_0_CosPropertyService__POA = omniORB.openModule("CosPropertyService__POA")
# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
# #include "acscommon.idl"
import acscommon_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
_0_log_audience = omniORB.openModule("log_audience")
_0_log_audience__POA = omniORB.openModule("log_audience__POA")
_0_acscommon = omniORB.openModule("acscommon")
_0_acscommon__POA = omniORB.openModule("acscommon__POA")
# #include "baci.idl"
import baci_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

#
# Start of module "acstelescopeServer"
#
__name__ = "acstelescopeServer"
_0_acstelescopeServer = omniORB.openModule("acstelescopeServer", r"../idl/acstelescopeServer.idl")
_0_acstelescopeServer__POA = omniORB.openModule("acstelescopeServer__POA", r"../idl/acstelescopeServer.idl")


# interface TelescopeServer
_0_acstelescopeServer._d_TelescopeServer = (omniORB.tcInternal.tv_objref, "IDL:alma/acstelescopeServer/TelescopeServer:1.0", "TelescopeServer")
omniORB.typeMapping["IDL:alma/acstelescopeServer/TelescopeServer:1.0"] = _0_acstelescopeServer._d_TelescopeServer
_0_acstelescopeServer.TelescopeServer = omniORB.newEmptyClass()
class TelescopeServer (_0_ACS.CharacteristicComponent):
    _NP_RepositoryId = _0_acstelescopeServer._d_TelescopeServer[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_acstelescopeServer.TelescopeServer = TelescopeServer
_0_acstelescopeServer._tc_TelescopeServer = omniORB.tcInternal.createTypeCode(_0_acstelescopeServer._d_TelescopeServer)
omniORB.registerType(TelescopeServer._NP_RepositoryId, _0_acstelescopeServer._d_TelescopeServer, _0_acstelescopeServer._tc_TelescopeServer)

# TelescopeServer operations and attributes
TelescopeServer._d_displayMessage = ((), (), None)
TelescopeServer._d_badMethod = ((), (), {_0_ACSErrTypeCommon.UnknownEx._NP_RepositoryId: _0_ACSErrTypeCommon._d_UnknownEx})
TelescopeServer._d__get_currentPositionAlpha = ((),(omniORB.typeMapping["IDL:alma/ACS/RWdouble:1.0"],),None)
TelescopeServer._d__get_currentPositionDelta = ((),(omniORB.typeMapping["IDL:alma/ACS/RWdouble:1.0"],),None)

# TelescopeServer object reference
class _objref_TelescopeServer (_0_ACS._objref_CharacteristicComponent):
    _NP_RepositoryId = TelescopeServer._NP_RepositoryId

    def __init__(self):
        _0_ACS._objref_CharacteristicComponent.__init__(self)

    def displayMessage(self, *args):
        return _omnipy.invoke(self, "displayMessage", _0_acstelescopeServer.TelescopeServer._d_displayMessage, args)

    def badMethod(self, *args):
        return _omnipy.invoke(self, "badMethod", _0_acstelescopeServer.TelescopeServer._d_badMethod, args)

    def _get_currentPositionAlpha(self, *args):
        return _omnipy.invoke(self, "_get_currentPositionAlpha", _0_acstelescopeServer.TelescopeServer._d__get_currentPositionAlpha, args)

    def _get_currentPositionDelta(self, *args):
        return _omnipy.invoke(self, "_get_currentPositionDelta", _0_acstelescopeServer.TelescopeServer._d__get_currentPositionDelta, args)

    __methods__ = ["displayMessage", "badMethod", "_get_currentPositionAlpha", "_get_currentPositionDelta"] + _0_ACS._objref_CharacteristicComponent.__methods__

omniORB.registerObjref(TelescopeServer._NP_RepositoryId, _objref_TelescopeServer)
_0_acstelescopeServer._objref_TelescopeServer = _objref_TelescopeServer
del TelescopeServer, _objref_TelescopeServer

# TelescopeServer skeleton
__name__ = "acstelescopeServer__POA"
class TelescopeServer (_0_ACS__POA.CharacteristicComponent):
    _NP_RepositoryId = _0_acstelescopeServer.TelescopeServer._NP_RepositoryId


    _omni_op_d = {"displayMessage": _0_acstelescopeServer.TelescopeServer._d_displayMessage, "badMethod": _0_acstelescopeServer.TelescopeServer._d_badMethod, "_get_currentPositionAlpha": _0_acstelescopeServer.TelescopeServer._d__get_currentPositionAlpha, "_get_currentPositionDelta": _0_acstelescopeServer.TelescopeServer._d__get_currentPositionDelta}
    _omni_op_d.update(_0_ACS__POA.CharacteristicComponent._omni_op_d)

TelescopeServer._omni_skeleton = TelescopeServer
_0_acstelescopeServer__POA.TelescopeServer = TelescopeServer
omniORB.registerSkeleton(TelescopeServer._NP_RepositoryId, TelescopeServer)
del TelescopeServer
__name__ = "acstelescopeServer"

#
# End of module "acstelescopeServer"
#
__name__ = "acstelescopeServer_idl"

_exported_modules = ( "acstelescopeServer", )

# The end.
