// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler v1.6.5 ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:381


#include "acstelescopeServerC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Object_Argument_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "acstelescopeServerC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:141

#if !defined (_ACS_RWDOUBLE__ARG_TRAITS_)
#define _ACS_RWDOUBLE__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<ACS::RWdouble>
    : public
        Object_Arg_Traits_T<
            ACS::RWdouble_ptr,
            ACS::RWdouble_var,
            ACS::RWdouble_out,
            TAO::Objref_Traits<ACS::RWdouble>,
            TAO::Any_Insert_Policy_Stream <ACS::RWdouble_ptr>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for acstelescopeServer::TelescopeServer.

acstelescopeServer::TelescopeServer_ptr
TAO::Objref_Traits<acstelescopeServer::TelescopeServer>::duplicate (
    acstelescopeServer::TelescopeServer_ptr p)
{
  return acstelescopeServer::TelescopeServer::_duplicate (p);
}

void
TAO::Objref_Traits<acstelescopeServer::TelescopeServer>::release (
    acstelescopeServer::TelescopeServer_ptr p)
{
  ::CORBA::release (p);
}

acstelescopeServer::TelescopeServer_ptr
TAO::Objref_Traits<acstelescopeServer::TelescopeServer>::nil (void)
{
  return acstelescopeServer::TelescopeServer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<acstelescopeServer::TelescopeServer>::marshal (
    const acstelescopeServer::TelescopeServer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*acstelescopeServer__TAO_TelescopeServer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void acstelescopeServer::TelescopeServer::displayMessage (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TelescopeServer_Proxy_Broker_ == 0)
    {
      acstelescopeServer_TelescopeServer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "displayMessage",
      14,
      this->the_TAO_TelescopeServer_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void acstelescopeServer::TelescopeServer::badMethod (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TelescopeServer_Proxy_Broker_ == 0)
    {
      acstelescopeServer_TelescopeServer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  static TAO::Exception_Data
  _tao_acstelescopeServer_TelescopeServer_badMethod_exceptiondata [] = 
    {
      {
        "IDL:alma/ACSErrTypeCommon/UnknownEx:1.0",
        ACSErrTypeCommon::UnknownEx::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ACSErrTypeCommon::_tc_UnknownEx
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "badMethod",
      9,
      this->the_TAO_TelescopeServer_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_acstelescopeServer_TelescopeServer_badMethod_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::CORBA::Double acstelescopeServer::TelescopeServer::startTelescope (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TelescopeServer_Proxy_Broker_ == 0)
    {
      acstelescopeServer_TelescopeServer_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Double>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "startTelescope",
      14,
      this->the_TAO_TelescopeServer_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::CORBA::Double acstelescopeServer::TelescopeServer::slewTelescope (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TelescopeServer_Proxy_Broker_ == 0)
    {
      acstelescopeServer_TelescopeServer_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Double>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "slewTelescope",
      13,
      this->the_TAO_TelescopeServer_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACS::RWdouble_ptr acstelescopeServer::TelescopeServer::currentPositionAlpha (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TelescopeServer_Proxy_Broker_ == 0)
    {
      acstelescopeServer_TelescopeServer_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACS::RWdouble>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_currentPositionAlpha",
      25,
      this->the_TAO_TelescopeServer_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::ACS::RWdouble_ptr acstelescopeServer::TelescopeServer::currentPositionDelta (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TelescopeServer_Proxy_Broker_ == 0)
    {
      acstelescopeServer_TelescopeServer_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACS::RWdouble>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_currentPositionDelta",
      25,
      this->the_TAO_TelescopeServer_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

acstelescopeServer::TelescopeServer::TelescopeServer (void)
 : the_TAO_TelescopeServer_Proxy_Broker_ (0)
{
  this->acstelescopeServer_TelescopeServer_setup_collocation ();
}

void
acstelescopeServer::TelescopeServer::acstelescopeServer_TelescopeServer_setup_collocation ()
{
  if (::acstelescopeServer__TAO_TelescopeServer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_TelescopeServer_Proxy_Broker_ =
        ::acstelescopeServer__TAO_TelescopeServer_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->ACS_CharacteristicComponent_setup_collocation ();
}

acstelescopeServer::TelescopeServer::~TelescopeServer (void)
{}

void 
acstelescopeServer::TelescopeServer::_tao_any_destructor (void *_tao_void_pointer)
{
  TelescopeServer *_tao_tmp_pointer =
    static_cast<TelescopeServer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

acstelescopeServer::TelescopeServer_ptr
acstelescopeServer::TelescopeServer::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<TelescopeServer>::narrow (
        _tao_objref,
        "IDL:alma/acstelescopeServer/TelescopeServer:1.0",
        acstelescopeServer__TAO_TelescopeServer_Proxy_Broker_Factory_function_pointer
      );
}

acstelescopeServer::TelescopeServer_ptr
acstelescopeServer::TelescopeServer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<TelescopeServer>::unchecked_narrow (
        _tao_objref,
        "IDL:alma/acstelescopeServer/TelescopeServer:1.0",
        acstelescopeServer__TAO_TelescopeServer_Proxy_Broker_Factory_function_pointer
      );
}

acstelescopeServer::TelescopeServer_ptr
acstelescopeServer::TelescopeServer::_duplicate (TelescopeServer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
acstelescopeServer::TelescopeServer::_tao_release (TelescopeServer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
acstelescopeServer::TelescopeServer::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/ACSComponent:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/CharacteristicModel:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/ACS/CharacteristicComponent:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:alma/acstelescopeServer/TelescopeServer:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* acstelescopeServer::TelescopeServer::_interface_repository_id (void) const
{
  return "IDL:alma/acstelescopeServer/TelescopeServer:1.0";
}

::CORBA::Boolean
acstelescopeServer::TelescopeServer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_acstelescopeServer_TelescopeServer (
    ::CORBA::tk_objref,
    "IDL:alma/acstelescopeServer/TelescopeServer:1.0",
    "TelescopeServer");
  
namespace acstelescopeServer
{
  ::CORBA::TypeCode_ptr const _tc_TelescopeServer =
    &_tao_tc_acstelescopeServer_TelescopeServer;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<acstelescopeServer::TelescopeServer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace acstelescopeServer
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TelescopeServer_ptr _tao_elem)
  {
    TelescopeServer_ptr _tao_objptr =
      TelescopeServer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TelescopeServer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<TelescopeServer>::insert (
        _tao_any,
        TelescopeServer::_tao_any_destructor,
        _tc_TelescopeServer,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      TelescopeServer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<TelescopeServer>::extract (
          _tao_any,
          TelescopeServer::_tao_any_destructor,
          _tc_TelescopeServer,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    acstelescopeServer::TelescopeServer_ptr _tao_elem)
{
  acstelescopeServer::TelescopeServer_ptr _tao_objptr =
    acstelescopeServer::TelescopeServer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    acstelescopeServer::TelescopeServer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<acstelescopeServer::TelescopeServer>::insert (
      _tao_any,
      acstelescopeServer::TelescopeServer::_tao_any_destructor,
      acstelescopeServer::_tc_TelescopeServer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    acstelescopeServer::TelescopeServer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<acstelescopeServer::TelescopeServer>::extract (
        _tao_any,
        acstelescopeServer::TelescopeServer::_tao_any_destructor,
        acstelescopeServer::_tc_TelescopeServer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const acstelescopeServer::TelescopeServer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    acstelescopeServer::TelescopeServer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::acstelescopeServer::TelescopeServer RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        acstelescopeServer__TAO_TelescopeServer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



