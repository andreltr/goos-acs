# Python stubs generated by omniidl from ../idl/acsdomeServer.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "acserr.idl"
import acserr_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
# #include "ACSErrTypeCommon.idl"
import ACSErrTypeCommon_idl
_0_ACSErr = omniORB.openModule("ACSErr")
_0_ACSErr__POA = omniORB.openModule("ACSErr__POA")
_0_ACSErrTypeCommon = omniORB.openModule("ACSErrTypeCommon")
_0_ACSErrTypeCommon__POA = omniORB.openModule("ACSErrTypeCommon__POA")
# #include "corbaidl.idl"
import corbaidl_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")
# #include "boxes.idl"
import boxes_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")
# #include "CosProperty.idl"
import CosProperty_idl
_0_CosPropertyService = omniORB.openModule("CosPropertyService")
_0_CosPropertyService__POA = omniORB.openModule("CosPropertyService__POA")
# #include "acscomponent.idl"
import acscomponent_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
# #include "acscommon.idl"
import acscommon_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")
_0_log_audience = omniORB.openModule("log_audience")
_0_log_audience__POA = omniORB.openModule("log_audience__POA")
_0_acscommon = omniORB.openModule("acscommon")
_0_acscommon__POA = omniORB.openModule("acscommon__POA")
# #include "baci.idl"
import baci_idl
_0_ACS = omniORB.openModule("ACS")
_0_ACS__POA = omniORB.openModule("ACS__POA")

#
# Start of module "acsdomeServer"
#
__name__ = "acsdomeServer"
_0_acsdomeServer = omniORB.openModule("acsdomeServer", r"../idl/acsdomeServer.idl")
_0_acsdomeServer__POA = omniORB.openModule("acsdomeServer__POA", r"../idl/acsdomeServer.idl")


# interface DomeServer
_0_acsdomeServer._d_DomeServer = (omniORB.tcInternal.tv_objref, "IDL:alma/acsdomeServer/DomeServer:1.0", "DomeServer")
omniORB.typeMapping["IDL:alma/acsdomeServer/DomeServer:1.0"] = _0_acsdomeServer._d_DomeServer
_0_acsdomeServer.DomeServer = omniORB.newEmptyClass()
class DomeServer (_0_ACS.CharacteristicComponent):
    _NP_RepositoryId = _0_acsdomeServer._d_DomeServer[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_acsdomeServer.DomeServer = DomeServer
_0_acsdomeServer._tc_DomeServer = omniORB.tcInternal.createTypeCode(_0_acsdomeServer._d_DomeServer)
omniORB.registerType(DomeServer._NP_RepositoryId, _0_acsdomeServer._d_DomeServer, _0_acsdomeServer._tc_DomeServer)

# DomeServer operations and attributes
DomeServer._d_displayMessage = ((), (), None)
DomeServer._d_badMethod = ((), (), {_0_ACSErrTypeCommon.UnknownEx._NP_RepositoryId: _0_ACSErrTypeCommon._d_UnknownEx})
DomeServer._d__get_domeCurrentPosition = ((),(omniORB.typeMapping["IDL:alma/ACS/RWdouble:1.0"],),None)
DomeServer._d__get_slitCurrentState = ((),(omniORB.typeMapping["IDL:alma/ACS/RWlong:1.0"],),None)

# DomeServer object reference
class _objref_DomeServer (_0_ACS._objref_CharacteristicComponent):
    _NP_RepositoryId = DomeServer._NP_RepositoryId

    def __init__(self):
        _0_ACS._objref_CharacteristicComponent.__init__(self)

    def displayMessage(self, *args):
        return _omnipy.invoke(self, "displayMessage", _0_acsdomeServer.DomeServer._d_displayMessage, args)

    def badMethod(self, *args):
        return _omnipy.invoke(self, "badMethod", _0_acsdomeServer.DomeServer._d_badMethod, args)

    def _get_domeCurrentPosition(self, *args):
        return _omnipy.invoke(self, "_get_domeCurrentPosition", _0_acsdomeServer.DomeServer._d__get_domeCurrentPosition, args)

    def _get_slitCurrentState(self, *args):
        return _omnipy.invoke(self, "_get_slitCurrentState", _0_acsdomeServer.DomeServer._d__get_slitCurrentState, args)

    __methods__ = ["displayMessage", "badMethod", "_get_domeCurrentPosition", "_get_slitCurrentState"] + _0_ACS._objref_CharacteristicComponent.__methods__

omniORB.registerObjref(DomeServer._NP_RepositoryId, _objref_DomeServer)
_0_acsdomeServer._objref_DomeServer = _objref_DomeServer
del DomeServer, _objref_DomeServer

# DomeServer skeleton
__name__ = "acsdomeServer__POA"
class DomeServer (_0_ACS__POA.CharacteristicComponent):
    _NP_RepositoryId = _0_acsdomeServer.DomeServer._NP_RepositoryId


    _omni_op_d = {"displayMessage": _0_acsdomeServer.DomeServer._d_displayMessage, "badMethod": _0_acsdomeServer.DomeServer._d_badMethod, "_get_domeCurrentPosition": _0_acsdomeServer.DomeServer._d__get_domeCurrentPosition, "_get_slitCurrentState": _0_acsdomeServer.DomeServer._d__get_slitCurrentState}
    _omni_op_d.update(_0_ACS__POA.CharacteristicComponent._omni_op_d)

DomeServer._omni_skeleton = DomeServer
_0_acsdomeServer__POA.DomeServer = DomeServer
omniORB.registerSkeleton(DomeServer._NP_RepositoryId, DomeServer)
del DomeServer
__name__ = "acsdomeServer"

#
# End of module "acsdomeServer"
#
__name__ = "acsdomeServer_idl"

_exported_modules = ( "acsdomeServer", )

# The end.
