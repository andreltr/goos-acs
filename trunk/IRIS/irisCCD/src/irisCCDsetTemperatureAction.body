/*
 * "@(#) $Id: irisCCDsetTemperatureAction.body,v 1.10 2005/03/09 14:46:30 tjuerges Exp $"
 *
 * $Log: irisCCDsetTemperatureAction.body,v $
 * Revision 1.10  2005/03/09 14:46:30  tjuerges
 * - Changed to be conform with the body architecture.
 *
 * Revision 1.9  2005/01/26 11:53:01  tjuerges
 * - Replaced get_sync and set_sync to properties by getDevIO()->read and write.
 * - Added local definitions of acs_error and time_stamp for getDevIO calls.
 *
 * Revision 1.8  2004/09/22 14:16:35  tjuerges
 * - F�r Simulation backgroundNoise und readoutNoise hinzugef�gt, rmsNoise entfernt.
 * - GUI speichert FITS auf Verlangen.
 * - GUI startet externes DS9 und beendet es.
 *
 *
 */

/*
 * Put in completion.[type|code] the completion error code.
 * By default it is set to Ok.
 *
 * Set old_component_status to any irisStatus.
 * The component will reflect this after exiting
 * this method.
 *
 * Already defined are int acs_error and ACS::Time time_stamp for DevIO calls.
 */

if((camera!=0)&&(camera->get_camera_running()))
{
  ACS::Time time_stamp(0);
  double commanded_temperature(m_commandedCCDTemperature_p->getDevIO()->read(time_stamp));
  bool ret(camera->set_camera_temperature(commanded_temperature));

  if(ret==false)
  {
    ACS_SHORT_LOG((LM_ERROR,"irisCCD::setTemperatureAction: Cannot set CCD temperature. Check hardware!"));
  }
  else
  {
    ACS_SHORT_LOG((LM_INFO,"irisCCD::setTemperatureAction: OK. Temperature set to %.2g�C.",commanded_temperature));
  }
}
else
{
  ACS_SHORT_LOG((LM_ERROR,"irisCCD::setTemperatureAction: No camera active."));
}
